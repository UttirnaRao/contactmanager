{"version":3,"sources":["components/layout/Header.js","context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","branding","className","href","to","defaultProps","Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","phone","email","onClick","style","cursor","margin","float","color","bind","marginRight","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","updContact","match","params","put","NotFound","Test","title","body","fetch","then","response","json","App","exact","path","component","About","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f5e47874.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Header = (props) => {\r\n    \r\n    const {branding} = props;\r\n\r\n    return (\r\n        //<div>\r\n            //<h1>{branding}</h1>\r\n        //</div>\r\n\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                \r\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\r\n\r\n                <div>\r\n                   \r\n                   <ul className=\"navbar-nav mr-auto\">\r\n                    \r\n                    <li className=\"nav-item\"> \r\n                        {/*<a href=\"/\" className=\"nav-link\">Home</a>*/}\r\n                        <Link to=\"/\" className=\"nav-link\">\r\n                          <i className=\"fas fa-home\"> </i>\r\n                           Home\r\n                        </Link>\r\n                    </li>\r\n\r\n                    <li className=\"nav-item\"> \r\n                        <Link to=\"/contact/add\" className=\"nav-link\">\r\n                            <i className=\"fas fa-plus\">< /i>                           \r\n                             Add\r\n                        </Link>\r\n                    </li>\r\n\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/about\" className=\"nav-link\">\r\n                           <i className=\"fas fa-question\"> </i>\r\n                            About\r\n                        </Link>\r\n                    </li>\r\n                  \r\n                   </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\n//const headingStyle = {\r\n  //  color: 'green',\r\n    //fontSize: '50px'\r\n//};\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload )\r\n            };\r\n\r\n            case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            };\r\n\r\n            case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? (contact = action.payload) : contact)\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n            contacts: [],\r\n            dispatch: action => this.setState(state => reducer (state,action))\r\n            \r\n    }\r\n\r\n    //fetched 10 users from the url\r\n    /*componentDidMount(){\r\n        axios.get('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => this.setState({contacts:res.data}));\r\n    }*/\r\n\r\n    async componentDidMount(){\r\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n        //.then(res => this.setState({contacts:res.data}));\r\n\r\n        this.setState({contacts: res.data});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state} >\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types'\r\nimport { Consumer } from '../../context';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n    \r\n    onDeleteClick = async (id, dispatch) => {\r\n        //dispatch({type: 'DELETE_CONTACT', payload: id});\r\n        \r\n        //axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n        //.then(res => dispatch({type: 'DELETE_CONTACT', payload: id}) );\r\n\r\n        try{\r\n        await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n        dispatch({type: 'DELETE_CONTACT', payload: id});\r\n        } catch(e) {\r\n            dispatch({type: 'DELETE_CONTACT', payload: id});\r\n        }\r\n        \r\n    };\r\n\r\n    render() {\r\n\r\n        const { id, name, phone, email } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return(\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>{ name } \r\n                                <i onClick={() => this.setState({ showContactInfo: !this.state.showContactInfo })} className=\"fas fa-sort-down\" style={{cursor: 'pointer', margin:'10px'}} />\r\n                            \r\n                                <i className=\"fas fa-times\" style={{cursor: 'pointer', float:'right', color:'red'}} onClick={this.onDeleteClick.bind(this, id, dispatch)} ></i>\r\n                               \r\n                                <Link to={`contact/edit/${id}`}>\r\n                                <i \r\n                                    className=\"fas fa-pencil-alt\" \r\n                                    style={{\r\n                                        cursor: 'pointer',\r\n                                        float: 'right',\r\n                                        color: 'black',\r\n                                        marginRight: '1rem'}}\r\n                                ></i>\r\n                                </Link>\r\n                            </h4>\r\n                            {showContactInfo ? (<ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">Phone: {phone}</li>\r\n                                <li className=\"list-group-item\">Email: {email}</li>\r\n                            </ul>) : null}\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    };\r\n};\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Contact;","import React, { Component } from 'react'\r\nimport Contact from './Contact'\r\nimport { Consumer } from '../../context';\r\n\r\nclass Contacts extends Component {\r\n \r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    \r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger\">Contact </span>List\r\n                            </h1>\r\n                            {value.contacts.map (contact => (\r\n                                <Contact \r\n                                    key={contact.id}\r\n                                    contact={contact}\r\n                                />\r\n                             ))}\r\n                        </React.Fragment>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n         <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input \r\n                type={type}\r\n                name={name}\r\n                className={classnames('form-control form-control-lg', {\r\n                    'is-invalid': error\r\n                })}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error:PropTypes.string\r\n};\r\n\r\nTextInputGroup.defaultProps = {\r\n    type:'text'\r\n};\r\n\r\nexport default TextInputGroup;","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\n//import {v1 as uuid} from 'uuid';\r\nimport axios from 'axios';\r\n\r\nclass AddContact extends Component {\r\n    state ={\r\n        name: '',\r\n        phone: '',\r\n        email: '',\r\n        errors: {}\r\n    }\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        const {name, phone, email} = this.state;\r\n\r\n        //check fields\r\n        if(name === '') {\r\n            this.setState({errors: {name: 'Name is Required'}});\r\n            return;\r\n        }\r\n        \r\n        if(phone === '') {\r\n            this.setState({errors: {phone: 'Phone Number is Required'}});\r\n            return;\r\n        }\r\n\r\n        if(email === '') {\r\n            this.setState({errors: {email: 'Email is Required'}});\r\n            return;\r\n        }\r\n\r\n        const newContact = {\r\n            //id: uuid(),\r\n            name,\r\n            phone,\r\n            email\r\n        };\r\n\r\n        const res = await axios\r\n        .post('https://jsonplaceholder.typicode.com/users', newContact)\r\n        //.then(res => dispatch({type: 'ADD_CONTACT', payload:res.data }));\r\n        dispatch({type: 'ADD_CONTACT', payload:res.data });\r\n\r\n        //dispatch({type: 'ADD_CONTACT', payload:newContact });\r\n\r\n        //clear after a submit / no blank submits\r\n        this.setState({\r\n            name:'',\r\n            phone:'',\r\n            email:'',\r\n            errors: {}\r\n        });\r\n\r\n        //redirecting back to the home back after adding a contact\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    render() {\r\n        const {name, phone, email, errors} = this.state;\r\n        \r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return(\r\n                       <div className=\"card mb-3\">\r\n                            <div className=\"card-header\"> Add Contact </div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone Number\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        value=\"Add Contact\"\r\n                                        className=\"btn btn-block btn-light\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div> \r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddContact;","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\n//import {v1 as uuid} from 'uuid';\r\nimport axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n    state ={\r\n        name: '',\r\n        phone: '',\r\n        email: '',\r\n        errors: {}\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        const contact = res.data;\r\n        this.setState({\r\n            name: contact.name,\r\n            phone: contact.phone,\r\n            email: contact.email\r\n        });\r\n    };\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        const {name, phone, email} = this.state;\r\n\r\n        //check fields / error check\r\n        if(name === '') {\r\n            this.setState({errors: {name: 'Name is Required'}});\r\n            return;\r\n        }\r\n        \r\n        if(phone === '') {\r\n            this.setState({errors: {phone: 'Phone Number is Required'}});\r\n            return;\r\n        }\r\n\r\n        if(email === '') {\r\n            this.setState({errors: {email: 'Email is Required'}});\r\n            return;\r\n        }\r\n\r\n        const updContact = {\r\n            name,\r\n            phone,\r\n            email\r\n        }\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\r\n\r\n        dispatch({type: 'UPDATE_CONTACT', payload:res.data});\r\n\r\n        //clear after a submit / no blank submits\r\n        this.setState({\r\n            name:'',\r\n            phone:'',\r\n            email:'',\r\n            errors: {}\r\n        });\r\n\r\n        //redirecting back to the home back after adding a contact\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    render() {\r\n        const {name, phone, email, errors} = this.state;\r\n        \r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return(\r\n                       <div className=\"card mb-3\">\r\n                            <div className=\"card-header\"> Edit Contact </div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone Number\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        value=\"Update Contact\"\r\n                                        className=\"btn btn-block btn-light\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div> \r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditContact;","import React from 'react'\r\n\r\nexport default props => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager </h1>\r\n            {/* adding id to the parmalink*/}\r\n            {/*<h1 className=\"display-4\">{props.match.params.name} </h1>*/}\r\n            <p className=\"lead\">Simple App to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404 Page Not Found</span></h1>\r\n            <p className=\"lead\">Sorry, that page does not exist</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nclass Test extends Component {\r\n\r\n    state ={\r\n        title:'',\r\n        body:''\r\n    };\r\n    \r\n    componentDidMount() {\r\n        //console.log('componentDidMount...');\r\n        fetch('https://jsonplaceholder.typicode.com/todos/1')\r\n            .then(response => response.json())\r\n            //.then(json => console.log(json));\r\n            //.then(data => console.log(data));\r\n            .then(data => this.setState({\r\n                title:data.title,\r\n                body:data.body})\r\n                );\r\n    }\r\n\r\n    // UNSAFE_componentWillMount() {\r\n    //     console.log('componentWillMount...');\r\n    // }\r\n\r\n    // componentDidUpdate() {\r\n    //     console.log('componentDidUpdate...');\r\n    // }\r\n\r\n    // componentWillUpdate() {\r\n    //     console.log('componentWillUpdate...');\r\n    // }\r\n\r\n    // UNSAFE_componentWillReceiveProps(nextProps, nextState) {\r\n    //         console.log('componentWillReceiveProps...');\r\n    // }\r\n\r\n    // //new ones from the website articel\r\n    // static getDerivedStateFromPropes(next.Props, prevState) {\r\n    //     return {\r\n    //         test: 'something';\r\n    //     }\r\n    // }\r\n\r\n    // getSnapshotBeforeUpdate(prevProps,PrevState) {\r\n    //     console.log('getSnapshotBeforeUpdate...');\r\n    // }\r\n    \r\n    render() {\r\n\r\n        const {title, body} = this.state;\r\n        return (\r\n            <div>\r\n                <h1>{title}</h1>\r\n                <p>{body}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Test;","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport { Provider } from './context';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n\n    return (\n      <Provider>\n      <Router>\n      <div className=\"App\">\n        <Header branding=\"Contact Manager\"/>\n        \n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={Contacts} />\n            <Route exact path=\"/contact/add\" component={AddContact} />\n            <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/test\" component={Test} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>  \n      </div>\n      </Router>\n      </Provider>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}